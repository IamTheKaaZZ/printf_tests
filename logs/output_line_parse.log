("CONVERSION TESTS\n")
("\nNORMAL DECIMALS\n")
("NORMAL \'d\'\n\t[%d]\n", 0)
("NORMAL \'d\'\n\t[%.d]\n", 0)
("NORMAL \'d\'\n\t[%.d]\n", 1)
("NORMAL \'d\'\n\t[%.d]\n", 42)
("NORMAL \'d\'\n\t[%d]\n", INT_MAX)
("NORMAL \'d\'\n\t[%d]\n", INT_MIN)
("NORMAL \'i\'\n\t[%i]\n", 0)
("NORMAL \'i\'\n\t[%i]\n", INT_MAX)
("NORMAL \'i\'\n\t[%i]\n", INT_MIN)
("\nSHORT DECIMALS\n")
("SHORT \'hd\'\n\t[%hd]\n", 0)
("SHORT \'hd\'\n\t[%hd]\n", SHRT_MAX)
("SHORT \'hd\'\n\t[%hd]\n", SHRT_MIN)
("SHORT(OVERFLOW) \'hd\'\n\t[%hd]\n", SHRT_MAX + 1)
("SHORT(OVERFLOW) \'hd\'\n\t[%hd]\n", SHRT_MIN - 1)
("\nSHORTCHAR DECIMALS\n")
("SHORTCHAR \'hhd\'\n\t[%hhd]\n", 0)
("SHORTCHAR \'hhd\'\n\t[%hhd]\n", SCHAR_MAX)
("SHORTCHAR \'hhd\'\n\t[%hhd]\n", SCHAR_MIN)
("SHORTCHAR(OVERFLOW) \'hhd\'\n\t[%hhd]\n", SCHAR_MAX + 1)
("SHORTCHAR(OVERFLOW) \'hhd\'\n\t[%hhd]\n", SCHAR_MIN - 1)
("\nLONG DECIMALS\n")
("LONG \'ld\'\n\t[%ld]\n", 0)
("LONG \'ld\'\n\t[%ld]\n", LONG_MAX)
("LONG \'ld\'\n\t[%ld]\n", LONG_MIN)
("LONG(OVERFLOW) \'ld\'\n\t[%ld]\n", LONG_MAX + 1)
("LONG(OVERFLOW) \'ld\'\n\t[%ld]\n", LONG_MIN - 1)
("\nLONG LONG DECIMALS\n")
("LONG LONG \'lld\'\n\t[%lld]\n", 0)
("LONG LONG \'lld\'\n\t[%lld]\n", LLONG_MAX)
("LONG LONG \'lld\'\n\t[%lld]\n", LLONG_MIN)
("LONG LONG(OVERFLOW) \'lld\'\n\t[%lld]\n", LLONG_MAX + 1)
("LONG LONG(OVERFLOW) \'lld\'\n\t[%lld]\n", LLONG_MIN - 1)
("\nUNSIGNED DECIMALS\n")
("UINT \'u\'\n\t[%u]\n", 0)
("UINT \'u\'\n\t[%u]\n", UINT_MAX)
("UINT(-1) \'u\'\n\t[%u]\n", -1)
("SHORT UINT \'hu\'\n\t[%hu]\n", 0)
("SHORT UINT \'hu\'\n\t[%hu]\n", USHRT_MAX)
("SHORT UINT(-1) \'hu\'\n\t[%hu]\n", -1)
("UNSIGNED CHAR \'hhu\'\n\t[%hhu]\n", 0)
("UNSIGNED CHAR \'hhu\'\n\t[%hhu]\n", UCHAR_MAX)
("UNSIGNED CHAR(-1) \'hhu\'\n\t[%hhu]\n", -1)
("ULONG \'lu\'\n\t[%lu]\n", 0)
("ULONG \'lu\'\n\t[%lu]\n", ULONG_MAX)
("ULONG(-1) \'lu\'\n\t[%lu]\n", -1)
("ULONGLONG \'llu\'\n\t[%llu]\n", 0)
("ULONGLONG \'llu\'\n\t[%llu]\n", ULLONG_MAX)
("ULONGLONG(-1) \'llu\'\n\t[%llu]\n", -1)
("\nSHORT HEX LC\n")
("SHORT \'hx\'\n\t[%hx]\n", 0)
("SHORT \'hx\'\n\t[%hx]\n", SHRT_MAX)
("SHORT \'hx\'\n\t[%hx]\n", SHRT_MIN)
("SHORT(OVERFLOW) \'hx\'\n\t[%hx]\n", SHRT_MAX + 1)
("SHORT(OVERFLOW) \'hx\'\n\t[%hx]\n", SHRT_MIN - 1)
("\nSHORT HEX UC\n")
("SHORT \'hX\'\n\t[%hX]\n", 0)
("SHORT \'hX\'\n\t[%hX]\n", SHRT_MAX)
("SHORT \'hX\'\n\t[%hX]\n", SHRT_MIN)
("SHORT(OVERFLOW) \'hx\'\n\t[%hX]\n", SHRT_MAX + 1)
("SHORT(OVERFLOW) \'hx\'\n\t[%hX]\n", SHRT_MIN - 1)
("\nSHORTCHAR HEX LC\n")
("SHORTCHAR \'hhx\'\n\t[%hhx]\n", 0)
("SHORTCHAR \'hhx\'\n\t[%hhx]\n", SCHAR_MAX)
("SHORTCHAR \'hhx\'\n\t[%hhx]\n", SCHAR_MIN)
("SHORTCHAR(OVERFLOW) \'hhx\'\n\t[%hhx]\n", SCHAR_MAX + 1)
("SHORTCHAR(OVERFLOW) \'hhx\'\n\t[%hhx]\n", SCHAR_MIN - 1)
("\nSHORTCHAR HEX UC\n")
("SHORTCHAR \'hhX\'\n\t[%hhX]\n", 0)
("SHORTCHAR \'hhX\'\n\t[%hhX]\n", SCHAR_MAX)
("SHORTCHAR \'hhX\'\n\t[%hhX]\n", SCHAR_MIN)
("SHORTCHAR(OVERFLOW) \'hhX\'\n\t[%hhX]\n", SCHAR_MAX + 1)
("SHORTCHAR(OVERFLOW) \'hhX\'\n\t[%hhX]\n", SCHAR_MIN - 1)
("\nLONG HEX LC\n")
("LONG \'lx\'\n\t[%lx]\n", 0)
("LONG \'lx\'\n\t[%lx]\n", LONG_MAX)
("LONG \'lx\'\n\t[%lx]\n", LONG_MIN)
("LONG(OVERFLOW) \'lx\'\n\t[%lx]\n", LONG_MAX + 1)
("LONG(OVERFLOW) \'lx\'\n\t[%lx]\n", LONG_MIN - 1)
("\nLONG HEX UC\n")
("LONG \'lX\'\n\t[%lX]\n", 0)
("LONG \'lX\'\n\t[%lX]\n", LONG_MAX)
("LONG \'lX\'\n\t[%lX]\n", LONG_MIN)
("LONG(OVERFLOW) \'lX\'\n\t[%lX]\n", LONG_MAX + 1)
("LONG(OVERFLOW) \'lX\'\n\t[%lX]\n", LONG_MIN - 1)
("\nLONG LONG HEX LC\n")
("LONG LONG \'llx\'\n\t[%llx]\n", 0)
("LONG LONG \'llx\'\n\t[%llx]\n", LLONG_MAX)
("LONG LONG \'llx\'\n\t[%llx]\n", LLONG_MIN)
("LONG LONG(OVERFLOW) \'llx\'\n\t[%llx]\n", LLONG_MAX + 1)
("LONG LONG(OVERFLOW) \'llx\'\n\t[%llx]\n", LLONG_MIN - 1)
("\nLONG LONG HEX UC\n")
("LONG LONG \'llX\'\n\t[%llX]\n", 0)
("LONG LONG \'llX\'\n\t[%llX]\n", LLONG_MAX)
("LONG LONG \'llX\'\n\t[%llX]\n", LLONG_MIN)
("LONG LONG(OVERFLOW) \'llX\'\n\t[%llX]\n", LLONG_MAX + 1)
("LONG LONG(OVERFLOW) \'llX\'\n\t[%llX]\n", LLONG_MIN - 1)
("\nFLAG TESTS\n")
("**SINGLE FLAGS**\n")
("WIDTH(5): ZERO FLAG\n\t[%0*i]\n", 5, 1)
("WIDTH(5): MIN FLAG\n\t[%-*i]\n", 5, 1)
("WIDTH(5): SPACE FLAG\n\t[% *i]\n", 5, 1)
("WIDTH(5): PLUS FLAG\n\t[%+*i]\n", 5, 1)
("WIDTH(5): CARDINAL FLAG (LC HEX)\n\t[%#*x]\n", 5, 1)
("WIDTH(5): CARDINAL FLAG (UC HEX)\n\t[%#*X]\n", 5, 1)
("\n**COMBOS WITH ZERO FLAG**\n")
("WIDTH(5): && MIN FLAG\t== ZERO FLAG IGNORED!\n\t[%0-*i]\n", 5, 1)
("WIDTH(5): && SPACE FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0 *i]\n", 5, 1)
("WIDTH(5): && PLUS FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0+*i]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== PREFIX THEN ADD ZEROS\n\t[%0#*x]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (UC HEX)\t== PREFIX THEN ADD ZEROS\n\t[%0#*X]\n", 5, 1)
("\n**COMBOS WITH MIN FLAG**\n")
("WIDTH(5): && ZERO FLAG\t== ZERO FLAG IGNORED!\n\t[%0-*i]\n", 5, 1)
("WIDTH(5): && SPACE FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%- *i]\n", 5, 1)
("WIDTH(5): && PLUS FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%-+*i]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== PREFIX THEN LEFT ALLIGN\n\t[%-#*x]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (UC HEX)\t== PREFIX THEN LEFT ALLIGN\n\t[%-#*X]\n", 5, 1)
("\n**COMBOS WITH SPACE FLAG**\n")
("WIDTH(5): && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0 *i]\n", 5, 1)
("WIDTH(5): && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%- *i]\n", 5, 1)
("WIDTH(5): && PLUS FLAG\t== SPACE FLAG IGNORED!\n\t[% +*i]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== SPACE FLAG IGNORED!\n\t[% #*x]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (UC HEX)\t== SPACE FLAG IGNORED!\n\t[% #*X]\n", 5, 1)
("\n**COMBOS WITH PLUS FLAG**\n")
("WIDTH(5): && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%+-*i]\n", 5, 1)
("WIDTH(5): && SPACE FLAG\t== SPACE FLAG IGNORED!\n\t[%+ *i]\n", 5, 1)
("WIDTH(5): && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0+*i]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== SPACE FLAG IGNORED!\n\t[%+#*x]\n", 5, 1)
("WIDTH(5): && CARDINAL FLAG (UC HEX)\t== SPACE FLAG IGNORED!\n\t[%+#*X]\n", 5, 1)
("\n**COMBOS WITH CARDINAL FLAG**\n")
("WIDTH(5): (LC HEX) && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0#*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0#*X]\n", 5, 1)
("WIDTH(5): (LC HEX) && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%-#*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%-#*X]\n", 5, 1)
("WIDTH(5): (LC HEX) && SPACE FLAG\t== SPACE FLAG IGNORED!\n\t[% #*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && SPACE FLAG\t== SPACE FLAG IGNORED!\n\t[% #*X]\n", 5, 1)
("WIDTH(5): (LC HEX) && PLUS FLAG\t== PLUS FLAG IGNORED!\n\t[%+#*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && PLUS FLAG\t== PLUS FLAG IGNORED!\n\t[%+#*X]\n", 5, 1)
("WIDTH(5): (LC HEX) && ZERO FLAG && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%0-#*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && ZERO FLAG && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%0-#*X]\n", 5, 1)
("WIDTH(5): (LC HEX) && ZERO FLAG && SPACE FLAG\t== PREFIX THEN ADD ZEROS && SPACE IGNORED!\n\t[%0 #*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && ZERO FLAG && SPACE FLAG\t== PREFIX THEN ADD ZEROS && SPACE IGNORED!\n\t[%0 #*X]\n", 5, 1)
("WIDTH(5): (LC HEX) && ZERO FLAG && PLUS FLAG\t== PREFIX THEN ADD ZEROS && PLUS IGNORED!\n\t[%0+#*x]\n", 5, 1)
("WIDTH(5): (UC HEX) && ZERO FLAG && PLUS FLAG\t== PREFIX THEN ADD ZEROS && PLUS IGNORED!\n\t[%0+#*X]\n", 5, 1)
("\n**ALL FLAG**\n")
("WIDTH(5): (LC HEX) && ALL FLAGS\t== ALL FLAGS IGNORED EXCEPT MINUS\n\t[%0#+- *x]\n", 5, 1)
("\n**WIDTH + FLAG TESTS FOR NUMBERS**\n")
("WIDTH(5):\n\t[%*i]\n", 5, 1)
("WIDTH(05) == WIDTH(5)\n\t[%*i]\n", 05, 1)
("WIDTH(5) && ZERO FLAG\n\t[%0*i]\n", 05, 1)
("WIDTH(5) && SPACE FLAG\n\t[% *i]\n", 05, 1)
("WIDTH(5) && PLUS FLAG\n\t[%+*i]\n", 05, 1)
("WIDTH(-5) => MIN FLAG\n\t[%*i]\n", -5, 1)
("WIDTH(-5) => MIN FLAG\n\t[%*i]\n", -05, 1)
("WIDTH(-5) && ZERO FLAG => MIN FLAG && ZERO FLAG IGNORED\n\t[%0*i]\n", -05, 1)
("WIDTH(-5) && MIN FLAG => MIN FLAG\n\t[%-*i]\n", -5, 1)
("WIDTH(-5) && SPACE FLAG => MIN FLAG && SPACE FLAG\n\t[% *i]\n", -5, 1)
("WIDTH(-5) && PLUS FLAG => MIN FLAG && PLUS FLAG\n\t[%+*i]\n", -5, 1)
("\n**WIDTH + FLAG TESTS FOR STRINGS**\n")
("WIDTH(5):\n\t[%*s]\n", 5, "LOL")
("WIDTH(05) == WIDTH(5)\n\t[%*s]\n", 05, "LOL")
("WIDTH(5) && ZERO FLAG\n\t[%0*s]\n", 05, "LOL")
("WIDTH(5) && SPACE FLAG\n\t[% *s]\n", 05, "LOL")
("WIDTH(5) && PLUS FLAG\n\t[%+*s]\n", 05, "LOL")
("WIDTH(-5) => MIN FLAG\n\t[%*s]\n", -5, "LOL")
("WIDTH(-5) => MIN FLAG\n\t[%*s]\n", -05, "LOL")
("WIDTH(-5) && ZERO FLAG => MIN FLAG && ZERO FLAG IGNORED\n\t[%0*s]\n", -05, "LOL")
("WIDTH(-5) && MIN FLAG => MIN FLAG\n\t[%-*s]\n", -5, "LOL")
("WIDTH(-5) && SPACE FLAG => MIN FLAG && SPACE FLAG IGNORED\n\t[% *s]\n", -5, "LOL")
("WIDTH(-5) && PLUS FLAG => MIN FLAG && PLUS FLAG IGNORED\n\t[%+*s]\n", -5, "LOL")
("\n**WIDTH + PRECISION TESTS FOR NUMBERS**\n")
("PRECISION(5) < AMOUNT OF DIGITS == NO PRECISION\n\t[%.*i]\n", 5, 1000000)
("NEG PRECISION(-5) == NO PRECISION\n\t[%.*i]\n", -5, 1000000)
("NEG PRECISION(-20) == NO PRECISION\n\t[%.*i]\n", -20, 1000000)
("PRECISION(20) > AMOUNT OF DIGITS == LEADING ZEROS ADDED\n\t[%.*i]\n", 20, 1000000)
("PRECISION(20) > AMOUNT OF DIGITS && MIN FLAG == LEADING ZEROS ADDED\n\t[%-.*i]\n", 20, 1000000)
("WIDTH(20) > PRECISION(5) == NO PRECISION ONLY WIDTH HANDLED\n\t[%*.*i]\n", 20, 5, 1000000)
("PRECISION(5) < AMOUNT OF DIGITS == NO PRECISION\n\t[%.*i]\n", 5, -1000000)
("NEG PRECISION(-5) == NO PRECISION\n\t[%.*i]\n", -5, -1000000)
("NEG PRECISION(-20) == NO PRECISION\n\t[%.*i]\n", -20, -1000000)
("PRECISION(20) > AMOUNT OF DIGITS == LEADING ZEROS ADDED AFTER SIGN\n\t[%.*i]\n", 20, -1000000)
("PRECISION(20) > AMOUNT OF DIGITS && MIN FLAG == LEADING ZEROS ADDED AFTER SIGN\n\t[%-.*i]\n", 20, -1000000)
("WIDTH(20) > PRECISION(5) == NO PRECISION ONLY WIDTH HANDLED\n\t[%*.*i]\n", 20, 5, -1000000)
("[%-3.2d] [%10.42d]\n", 0, 0)
("[%-3.2d] [%10.42d]\n", 1, -1)
("[%.0d]\n", 0, 0)
("[%.*d]\n", -4, 0)
(" 0*[%-0*.10d]*0 0*[%-0*.0d]*0 |\n", 21, 1021, 21, -1011)
("0*[%0*.*d]*0 \n", 21, 10, -101)
("[%09.0d]\n", UINT_MAX)
("[%011.1d]\n", UINT_MAX)
("[%011.2d]\n", UINT_MAX)
("[%7d]\n", 42)
("[%-7d]\n", 42)
("[%7d]\n", -42)
("[%-7d]\n", -42)
("[%09.1x]\n", UINT_MAX)
("[%09.1X]\n", UINT_MAX)
("[%09.2x]\n", UINT_MAX)
("[%09.2X]\n", UINT_MAX)
("%% *.5i 42 == [% *.5i]\n", 4, 42)
("%% *.5i 42 == [% *.5i]\n", 4, -42)
("\n**WIDTH + PRECISION TESTS FOR STRINGS**\n")
("PRECISION(5) < STRLEN == PRECISION\n\t[%.*s]\n", 5, "EEEEEEEEEEEEEEE")
("NEG PRECISION(-5) == NO PRECISION\n\t[%.*s]\n", -5, "EEEEEEEEEEEEEEE")
("NEG PRECISION(-20) == NO PRECISION\n\t[%.*s]\n", -20, "EEEEEEEEEEEEEEE")
("PRECISION(20) > STRLEN == STRLEN IS MAX LIMIT\n\t[%.*s]\n", 20, "EEEEEEEEEEEEEEE")
("WIDTH(20) > PRECISION(5) == BOTH PRECISION AND WIDTH HANDLED\n\t[%*.*s]\n", 20, 5, "EEEEEEEEEEEEEEE")
("WIDTH(20) > PRECISION(5) == BOTH PRECISION AND WIDTH HANDLED && ZERO FLAG\n\t[%0*.*s]\n", 20, 5, "EEEEEEEEEEEEEEE")
("PRECISION(5) < STRLEN == PRECISION\n\t[%-.*s]\n", 5, "EEEEEEEEEEEEEEE")
("NEG PRECISION(-5) == NO PRECISION\n\t[%-.*s]\n", -5, "EEEEEEEEEEEEEEE")
("NEG PRECISION(-20) == NO PRECISION\n\t[%-.*s]\n", -20, "EEEEEEEEEEEEEEE")
("PRECISION(20) > STRLEN == STRLEN IS MAX LIMIT\n\t[%-.*s]\n", 20, "EEEEEEEEEEEEEEE")
("WIDTH(20) > PRECISION(5) == BOTH PRECISION AND WIDTH HANDLED\n\t[%-*.*s]\n", 20, 5, "EEEEEEEEEEEEEEE")
("[%3.3s%7.7s]\n", "hello", "world")
("[%-*.*s]\n", -10, -3, "Big oof")
("[%.s]\n", "Big oof")
("\n**WIDTH + PRECISION TESTS FOR NUMBERS(IN PARSE)**\n")
("PRECISION(5) < AMOUNT OF DIGITS == NO PRECISION\n\t[%.5i]\n", 1000000)
("NEG PRECISION(-5) == NO PRECISION\n\t[%.-5i]\n", 1000000)
("NEG PRECISION(-20) == NO PRECISION\n\t[%.-20i]\n", 1000000)
("PRECISION(20) > AMOUNT OF DIGITS == LEADING ZEROS ADDED\n\t[%.20i]\n", 1000000)
("PRECISION(20) > AMOUNT OF DIGITS && MIN FLAG == LEADING ZEROS ADDED\n\t[%-.20i]\n", 1000000)
("WIDTH(20) > PRECISION(5) == NO PRECISION ONLY WIDTH HANDLED\n\t[%20.5i]\n", 1000000)
("PRECISION(5) < AMOUNT OF DIGITS == NO PRECISION\n\t[%.5i]\n", -1000000)
("NEG PRECISION(-5) == NO PRECISION\n\t[%.-5i]\n", -1000000)
("NEG PRECISION(-20) == NO PRECISION\n\t[%.-20i]\n", -1000000)
("PRECISION(20) > AMOUNT OF DIGITS == LEADING ZEROS ADDED AFTER SIGN\n\t[%.20i]\n", -1000000)
("PRECISION(20) > AMOUNT OF DIGITS && MIN FLAG == LEADING ZEROS ADDED AFTER SIGN\n\t[%-.20i]\n", -1000000)
("WIDTH(20) > PRECISION(5) == NO PRECISION ONLY WIDTH HANDLED\n\t[%20.5i]\n", -1000000)
("WIDTH(20) == PRECISION(20)\n\t[%20.20i]\n", -1000000)
("WIDTH(5) == PRECISION(5)\n\t[%5.5i]\n", -1000000)
("\n**WIDTH + PRECISION TESTS FOR STRINGS(IN PARSE)**\n")
("PRECISION(5) < STRLEN == PRECISION\n\t[%.5s]\n", "EEEEEEEEEEEEEEE")
("NEG PRECISION(-5) == NO PRECISION\n\t[%.-5s]\n", "EEEEEEEEEEEEEEE")
("NEG PRECISION(-20) == NO PRECISION\n\t[%.-20s]\n", "EEEEEEEEEEEEEEE")
("PRECISION(20) > STRLEN == STRLEN IS MAX LIMIT\n\t[%.20s]\n", "EEEEEEEEEEEEEEE")
("WIDTH(20) > PRECISION(5) == BOTH PRECISION AND WIDTH HANDLED\n\t[%20.5s]\n", "EEEEEEEEEEEEEEE")
("WIDTH(20) > PRECISION(5) == BOTH PRECISION AND WIDTH HANDLED && ZERO FLAG\n\t[%020.5s]\n", "EEEEEEEEEEEEEEE")
("PRECISION(5) < STRLEN == PRECISION\n\t[%-.5s]\n", "EEEEEEEEEEEEEEE")
("NEG PRECISION(-5) == NO PRECISION\n\t[%-.-5s]\n", "EEEEEEEEEEEEEEE")
("NEG PRECISION(-20) == NO PRECISION\n\t[%-.-20s]\n", "EEEEEEEEEEEEEEE")
("PRECISION(20) > STRLEN == STRLEN IS MAX LIMIT\n\t[%-.20s]\n", "EEEEEEEEEEEEEEE")
("WIDTH(20) > PRECISION(5) == BOTH PRECISION AND WIDTH HANDLED\n\t[%-20.5s]\n", "EEEEEEEEEEEEEEE")
("WIDTH(20) == PRECISION(20)\n\t[%-20.20s]\n", "EEEEEEEEEEEEEEE")
("WIDTH(5) == PRECISION(5)\n\t[%-5.5s]\n", "EEEEEEEEEEEEEEE")
("\nEXTRA TESTS FOR CHARS\n")
("Percent Test = [%%]\n")
("Percent Test = [%20%]\n")
("Percent Test = [%20.5%]\n")
("Edge case for char = [%-c%-c%c*]\n", 1, '0', 0)
("Edge case for char = [ -%*c* -%-*c*]\n", -2, 0, 2, 0)
("\nFLAG TESTS\n")
("**SINGLE FLAGS**\n")
("WIDTH(5): ZERO FLAG\n\t[%0*c]\n", 5, 48)
("WIDTH(5): MIN FLAG\n\t[%-*c]\n", 5, 48)
("WIDTH(5): SPACE FLAG\n\t[% *c]\n", 5, 48)
("WIDTH(5): PLUS FLAG\n\t[%+*c]\n", 5, 48)
("WIDTH(5): CARDINAL FLAG (LC HEX)\n\t[%#*x]\n", 5, 48)
("WIDTH(5): CARDINAL FLAG (UC HEX)\n\t[%#*X]\n", 5, 48)
("\n**COMBOS WITH ZERO FLAG**\n")
("WIDTH(5): && MIN FLAG\t== ZERO FLAG IGNORED!\n\t[%0-*c]\n", 5, 48)
("WIDTH(5): && SPACE FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0 *c]\n", 5, 48)
("WIDTH(5): && PLUS FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0+*c]\n", 5, 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== PREFIX THEN ADD ZEROS\n\t[%0#*c]\n", 5, 48)
("\n**COMBOS WITH MIN FLAG**\n")
("WIDTH(5): && ZERO FLAG\t== ZERO FLAG IGNORED!\n\t[%0-*c]\n", 5, 48)
("WIDTH(5): && SPACE FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%- *c]\n", 5, 48)
("WIDTH(5): && PLUS FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%-+*c]\n", 5, 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== PREFIX THEN LEFT ALLIGN\n\t[%-#*c]\n", 5, 48)
("\n**COMBOS WITH SPACE FLAG**\n")
("WIDTH(5): && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0 *c]\n", 5, 48)
("WIDTH(5): && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%- *c]\n", 5, 48)
("WIDTH(5): && PLUS FLAG\t== SPACE FLAG IGNORED!\n\t[% +*c]\n", 5, 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== SPACE FLAG IGNORED!\n\t[% #*c]\n", 5, 48)
("\n**COMBOS WITH PLUS FLAG**\n")
("WIDTH(5): && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%+-*c]\n", 5, 48)
("WIDTH(5): && SPACE FLAG\t== SPACE FLAG IGNORED!\n\t[%+ *c]\n", 5, 48)
("WIDTH(5): && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0+*c]\n", 5, 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== SPACE FLAG IGNORED!\n\t[%+#*c]\n", 5, 48)
("\nFLAG TESTS, WIDTH IN PARSE\n")
("**SINGLE FLAGS**\n")
("WIDTH(5): ZERO FLAG\n\t[%05c]\n", 48)
("WIDTH(5): MIN FLAG\n\t[%-5c]\n", 48)
("WIDTH(5): SPACE FLAG\n\t[% 5c]\n", 48)
("WIDTH(5): PLUS FLAG\n\t[%+5c]\n", 48)
("WIDTH(5): CARDINAL FLAG (LC HEX)\n\t[%#5x]\n", 48)
("WIDTH(5): CARDINAL FLAG (UC HEX)\n\t[%#5X]\n", 48)
("\n**COMBOS WITH ZERO FLAG**\n")
("WIDTH(5): && MIN FLAG\t== ZERO FLAG IGNORED!\n\t[%0-5c]\n", 48)
("WIDTH(5): && SPACE FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0 5c]\n", 48)
("WIDTH(5): && PLUS FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0+5c]\n", 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== PREFIX THEN ADD ZEROS\n\t[%0#5c]\n", 48)
("\n**COMBOS WITH MIN FLAG**\n")
("WIDTH(5): && ZERO FLAG\t== ZERO FLAG IGNORED!\n\t[%0-5c]\n", 48)
("WIDTH(5): && SPACE FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%- 5c]\n", 48)
("WIDTH(5): && PLUS FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%-+5c]\n", 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== PREFIX THEN LEFT ALLIGN\n\t[%-#5c]\n", 48)
("\n**COMBOS WITH SPACE FLAG**\n")
("WIDTH(5): && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0 5c]\n", 48)
("WIDTH(5): && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%- 5c]\n", 48)
("WIDTH(5): && PLUS FLAG\t== SPACE FLAG IGNORED!\n\t[% +5c]\n", 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== SPACE FLAG IGNORED!\n\t[% #5c]\n", 48)
("\n**COMBOS WITH PLUS FLAG**\n")
("WIDTH(5): && MIN FLAG\t== PREFIX THEN LEFT ALLIGN\n\t[%+-5c]\n", 48)
("WIDTH(5): && SPACE FLAG\t== SPACE FLAG IGNORED!\n\t[%+ 5c]\n", 48)
("WIDTH(5): && ZERO FLAG\t== PREFIX THEN ADD ZEROS\n\t[%0+5c]\n", 48)
("WIDTH(5): && CARDINAL FLAG (LC HEX)\t== SPACE FLAG IGNORED!\n\t[%+#5c]\n", 48)
("POINTERS: STRING\t\"%s\"\nADDRESS:\t[%p]\n", string, string)
("POINTERS: STRING\t\"%s\"\nADDRESS:\t[%p]\n", ptrnull, ptrnull)
("[% -03.d]\n", 0)
("[%+-03.d]\n", 0)
("[%+5.0d]\n", 0)
("[%#-03.x]\n", 0)
("[%#-03x]\n", 0)
("[%#-03.2x]\n", 0)
("[%#x]\n", 0)
("[%#X]\n", 0)
("[%#2X]\n", 0)
("I have printed %n[%d] chars so far... oh wait it's actually %n[%d] but my retval\n", &n, n, &n, n)
("n is [%d]\n", n)
("I have printed %hn[%d] chars so far... oh wait it's actually %hn[%d] but my retval\n", &nsh, nsh, &nsh, nsh)
("n is [%hd]\n", nsh)
("I have printed %hhn[%d] chars so far... oh wait it's actually %hhn[%d] but my retval\n", &nch, nch, &nch, nch)
("n is [%hhd]\n", nch)
("I have printed %ln[%d] chars so far... oh wait it's actually %ln[%d] but my retval\n", &nl, nl, &nl, nl)
("n is [%ld]\n", nl)
("I have printed %lln[%d] chars so far... oh wait it's actually %lln[%d] but my retval\n", &nll, nll, &nll, nll)
("n is [%lld]\n", nll)
("I have printed %n[%d] chars so far... oh wait it's actually %n[%d] but my retval\n", (void *)0, 0, (void *)0, 0)
("n is [%d]\n", 0)
("WIDE CHAR = [%lc]\n", L'E')
("WIDE CHAR = [%5lc]\n", L'E')
("WIDE CHAR = [%-5lc]\n", L'E')
("WIDE STRING = [%ls]\n", L"A very wide boi")
("WIDE STRING = [%ls]\n", NULL)
("WIDE STRING = [%20ls]\n", L"A very wide boi")
("WIDE STRING = [%-20ls]\n", L"A very wide boi")
("WIDE STRING = [%20.6ls]\n", L"A very wide boi")
("WIDE STRING = [%-20.6ls]\n", L"A very wide boi")
("NORMAL \'f\'\n\t[%f]\n", 0.0)
("NORMAL \'f\'\n\t[%f]\n", -0)
("NORMAL \'f\'\n\t[%f]\n", 1.0/0.0)
("NORMAL \'f\'\n\t[%f]\n", 42.42)
("NORMAL \'f\'\n\t[%f]\n", 1.5)
("NORMAL \'f\'\n\t[%f]\n", 23.375094499)
("NORMAL \'f\'\n\t[%f]\n", 23.00041)
("NORMAL \'f\'\n\t[%f]\n", 3.9999999)
("NORMAL \'f\'\n\t[%.0f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%.1f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%.5f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%.6f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%.7f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%.10f]\n", 42.55555555555)
("NORMAL \'f\'\n\t[%f]\n", 42424242.42424242424242 )
("NORMAL \'f\'\n\t[%.f]\n", 42424242.42424242424242 )
("NORMAL \'f\'\n\t[%.2f]\n", 42424242.42424242424242 )
("NORMAL \'f\'\n\t[%f]\n", -42424242.42424242424242 )
("NORMAL \'f\'\n\t[%.f]\n", -42424242.42424242424242 )
("NORMAL \'f\'\n\t[%.2f]\n", -42424242.42424242424242 )
("TREATED AS DOUBLE (PREC > 6) \'f\'\n\t[%.21f]\n", -42424242.42424242424242 )
("TREATED AS DOUBLE (PREC > 6) \'lf\'\n\t[%.20lf]\n", -42424242.42424242424242 )
("TREATED AS DOUBLE (PREC > 6) \'f\'\n\t[%.21f]\n", 42424242.42424242424242 )
("TREATED AS DOUBLE (PREC > 6) \'lf\'\n\t[%.20lf]\n", 42424242.42424242424242 )
("NORMAL \'f\'\n\t[%10.0f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%10.1f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%010.1f]\n", -42.55555555)
("NORMAL \'f\'\n\t[%+10.1f]\n", -42.55555555)
("NORMAL \'f\'\n\t[% 10.1f]\n", -42.55555555)
("NORMAL \'f\'\n\t[%010.1f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%+10.1f]\n", 42.55555555)
("NORMAL \'f\'\n\t[% 10.1f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%-10.1f]\n", 42.55555555)
("NORMAL \'f\'\n\t[%-10.1f]\n", -42.55555555)
("NORMAL \'f\'\n\t[%-10.*f]\n", -1, -42.55555555)
("\nSHORT OCTAL\n")
("SHORT \'ho\'\n\t[%ho]\n", 0)
("SHORT \'ho\'\n\t[%ho]\n", SHRT_MAX)
("SHORT \'ho\'\n\t[%ho]\n", SHRT_MIN)
("SHORT(OVERFLOW) \'ho\'\n\t[%ho]\n", SHRT_MAX + 1)
("SHORT(OVERFLOW) \'ho\'\n\t[%ho]\n", SHRT_MIN - 1)
("\nSHORTCHAR OCTAL\n")
("SHORTCHAR \'hho\'\n\t[%hho]\n", 0)
("SHORTCHAR \'hho\'\n\t[%hho]\n", SCHAR_MAX)
("SHORTCHAR \'hho\'\n\t[%hho]\n", SCHAR_MIN)
("SHORTCHAR(OVERFLOW) \'hho\'\n\t[%hho]\n", SCHAR_MAX + 1)
("SHORTCHAR(OVERFLOW) \'hho\'\n\t[%hho]\n", SCHAR_MIN - 1)
("\nLONG OCTAL\n")
("LONG \'lo\'\n\t[%lo]\n", 0)
("LONG \'lo\'\n\t[%lo]\n", LONG_MAX)
("LONG \'lo\'\n\t[%lo]\n", LONG_MIN)
("LONG(OVERFLOW) \'lo\'\n\t[%lo]\n", LONG_MAX + 1)
("LONG(OVERFLOW) \'lo\'\n\t[%lo]\n", LONG_MIN - 1)
("\nLONG LONG OCTAL\n")
("LONG LONG \'llo\'\n\t[%llo]\n", 0)
("LONG LONG \'llo\'\n\t[%llo]\n", LLONG_MAX)
("LONG LONG \'llo\'\n\t[%llo]\n", LLONG_MIN)
("LONG LONG(OVERFLOW) \'llo\'\n\t[%llo]\n", LLONG_MAX + 1)
("LONG LONG(OVERFLOW) \'llo\'\n\t[%llo]\n", LLONG_MIN - 1)
("[%09.1o]\n", UINT_MAX)
("[%09.2o]\n", UINT_MAX)
("[%#-03.o]\n", 0)
("[%#-03o]\n", 0)
("[%#-03.2o]\n", 0)
("[%#o]\n", 0)
("[%#2o]\n", 0)
